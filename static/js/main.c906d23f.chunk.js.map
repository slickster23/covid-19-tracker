{"version":3,"sources":["components/InfoBox.js","util.js","components/Map.js","components/Table.js","components/LineGraph.js","App.js","index.js"],"names":["InfoBox","title","cases","total","isRed","active","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataonMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","onCountryChange","event","countryCode","target","name","iso2","getCountriesData","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c906d23f.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Card, CardContent, Typography} from '@material-ui/core';\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({title, cases, total, isRed, active, ...props}) {\r\n    return (\r\n        <Card onClick ={props.onClick}  className={`infoBox ${active && \"infoBox--selected\"} ${\r\n            isRed && \"infoBox--red\"}`}> \r\n\r\n            <CardContent>\r\n                {/*Title*/}\r\n                <Typography className = \"infoBox__title\" color = \"textSecondary\">{title}</Typography>\r\n                {/*Number of cases*/}\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n\r\n                {/*Total*/}\r\n                <Typography className = \"infoBox__total\" color =\"textSecondary\">\r\n                    {total} {\" total\"}\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import { Circle, Popup } from \"react-leaflet\";\r\nimport React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport './components/Map.css'\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n      hex: \"#CC1034\",\r\n      multiplier: 200,\r\n    },\r\n    recovered: {\r\n      hex: \"#7dd71d\",\r\n      multiplier: 200,\r\n    },\r\n    deaths: {\r\n      hex: \"#fb4443\",\r\n      multiplier: 200,\r\n    },\r\n  };\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    sortedData.sort((a, b) => {\r\n        if (a.cases > b.cases) {\r\n            return -1;\r\n        } else {\r\n            return 1;\r\n        }\r\n    });\r\n\r\n    return sortedData;\r\n}\r\n\r\n//formats numbers\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  `${numeral(stat).format(\"0,0\")}`;\r\n\r\n\r\n//Draw circles on map with interactive tooltop\r\nexport const showDataonMap = (data, casesType ='cases') => (\r\ndata.map(country => (\r\n    <Circle center = {[country.countryInfo.lat, country.countryInfo.long]}\r\n    fillOpacity ={0.4}\r\n    color={casesTypeColors[casesType].hex}\r\n    fillColor={casesTypeColors[casesType].hex}\r\n    radius={\r\n        Math.sqrt(country[casesType]) * (casesTypeColors[casesType].multiplier)}>\r\n            <Popup>\r\n\r\n                <div className = \"info-container\">\r\n                    <div className = \"info-flag\" style ={{ backgroundImage: `url(${country.countryInfo.flag})` }}></div>\r\n                    <div className = \"info-name\">{country.country}</div>\r\n                    <div className = \"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                    <div className = \"info-recovered\">Recoveries: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                    <div className = \"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n                </div>\r\n\r\n            </Popup>\r\n        </Circle>\r\n))\r\n);\r\n\r\n","import React from 'react'\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport './Map.css';\r\nimport {showDataonMap} from \"../util\"\r\n\r\nfunction Map({countries, casesType, center, zoom}) {\r\n    return (\r\n        <div className = \"map\">\r\n            <LeafletMap center ={center} zoom={zoom}>\r\n                <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" attribution='&copy; \r\n                <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'></TileLayer>\r\n\r\n                {/*Loop through all countries and draw circles on the screen*/}\r\n                {showDataonMap(countries, casesType)}\r\n\r\n            </LeafletMap>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport numeral from 'numeral'\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className = \"table\">\r\n            {countries.map(({country, cases}) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td>\r\n                        <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = 'cases', ...props}) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className = {props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n        options={options}\r\n        \r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"#A6DFEC\",\r\n                borderColor: \"#52A6BD\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n        \r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;","import './App.css';\nimport React, {useEffect, useState} from 'react';\nimport { Select, FormControl, MenuItem, Card, CardContent } from '@material-ui/core';\nimport InfoBox from './components/InfoBox';\nimport Map from './components/Map';\nimport Table from './components/Table'\nimport './Table.css'\nimport { prettyPrintStat, sortData } from './util';\nimport LineGraph from './components/LineGraph'\nimport \"leaflet/dist/leaflet.css\"\n\n\n\n\nfunction App() {\n\n  //STATE = How to write variable in React\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({lat: 34.80746, lng: -40.4796})//center of the map\n  const [mapZoom, setMapZoom] = useState(3); //how far back to zoom\n  const [mapCountries, setMapCountries] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json())\n    .then((data) => {\n      setCountryInfo(data)\n    })\n  }, [])\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;//grabs selected value from drop down menu\n\n    console.log(countryCode);\n\n    setCountry(countryCode);//changes option displayed on Menu\n\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' :\n    `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    \n    await fetch (url)\n    .then (response => response.json())\n    .then (data => {\n      setCountry(countryCode);\n\n      //All of the data from country response\n      setCountryInfo(data);\n\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(4)\n\n    });\n    //https://disease.sh/v3/covid-19/countries/[COUNTRY_CODE]\n    //https://disease.sh/v3/covid-19/all\n\n  };\n\n\n\n  //UseEffect = Runs code based on given condition\n\n  useEffect(() => {\n\n    const getCountriesData = async () => {\n      await fetch (\"https://disease.sh/v3/covid-19/countries\")\n      .then ((response)=> response.json())\n      .then((data)=> {\n\n        //map returns an array\n        const countries = data.map((country) => (\n          {\n            name: country.country,\n            value: country.countryInfo.iso2\n          }));\n\n        const sortedData = sortData(data);\n        setTableData(sortedData);\n        setMapCountries(data);\n        setCountries(countries);\n        \n\n      });\n    };\n\n    getCountriesData()\n\n  }, [countries]);\n\n  return (\n    <div className=\"app\">\n      \n      {/*Header*/}\n      {/*Title, Input DropDown List*/}\n\n      <div className=\"app__left\">\n      <div className=\"app__header\">\n       <h1> COVID-19 TRACKER</h1>\n       <FormControl className=\"app__dropdown\">\n        <Select variant = \"outlined\" onChange={onCountryChange} value = {country}>\n          {/*Loop through all countries and show a dropdown list of option*/}\n          <MenuItem value = \"worldwide\">Worldwide</MenuItem>\n          {countries.map((country) => (\n            <MenuItem value={country.value}>{country.name}</MenuItem>\n          ))};\n          </Select>\n\n      </FormControl>\n        </div>\n\n        \n      {/*InfoBoxes*/}\n      {/*InfoBoxes*/}\n      {/*InfoBoxes*/}\n\n      \n     \n      <div className=\"app__stats\">\n        <InfoBox isRed  active = {casesType === \"cases\"} onClick = {(e) => setCasesType(\"cases\")} title = \"Coronavirus Cases (Today)\" cases = {prettyPrintStat(countryInfo.todayCases) } total = {prettyPrintStat(countryInfo.cases)}></InfoBox>\n        <InfoBox active = {casesType === \"recovered\"} onClick = {(e) => setCasesType(\"recovered\")} title = \"Recovered (Today)\" cases = {prettyPrintStat(countryInfo.todayRecovered)} total = {prettyPrintStat(countryInfo.recovered)}></InfoBox>\n        <InfoBox isRed active = {casesType === \"deaths\"} onClick = {(e) => setCasesType(\"deaths\")} title = \"Deaths (Today)\" cases = {prettyPrintStat(countryInfo.todayDeaths)} total = {prettyPrintStat(countryInfo.deaths)}></InfoBox>\n\n      </div>\n\n\n      {/*Map*/}\n      <Map countries = {mapCountries} center = {mapCenter} zoom ={mapZoom} casesType = {casesType} />\n    </div>\n\n    <Card className=\"app__right\">\n      <CardContent className = \"stats\">\n         {/*Table*/}\n        <h3>Live Cases by Country</h3>\n        <Table countries = {tableData}></Table>\n        <h3 className = \"graph__title\">Worldwide {casesType} </h3>\n         {/*Graph*/}\n      <LineGraph className= \"app__graph\" casesType = {casesType}/>\n      </CardContent>\n     \n     \n    </Card>\n\n      </div>\n      \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}